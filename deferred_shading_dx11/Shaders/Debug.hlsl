#ifndef DEBUG_HLSL
#define DEBUG_HLSL

#define UCHAR4_TO_FLOAT4(x, y, z, w) \
    float4((float) x / 255.0f, (float) y / 255.0f, (float) z / 255.0f, (float) w / 255.0f)

float4 intToColor(int value)
{
    if (value == 0) {
        return float4( 0.0f, 0.0f, 0.0f, 1.0f );
    } else if (value == 1) {
           return float4( 0.0f, 0.0f, 0.5f, 1.0f );
    } else if (value == 2) {
        return float4( 0.0f, 0.5f, 0.0f, 1.0f );
    } else if (value == 3) {
        return float4( 0.0f, 0.5f, 0.5f, 1.0f );
    } else if (value == 4) {
        return float4( 0.5f, 0.0f, 0.0f, 1.0f );
    } else if (value == 6) {
        return float4( 0.5f, 0.0f, 0.5f, 1.0f );
    } else if (value == 7) {
        return float4( 0.5f, 0.5f, 0.0f, 1.0f );
    } else if (value == 8) {
        return float4( 0.5f, 0.5f, 0.5f, 1.0f );
    } else {
        return float4( 1.0f, 1.0f, 1.0f, 1.0f );
    }
}

float4 floatToColor(float value)
{
    if (value == 0.0f) {
        return float4(0.0f, 0.0f, 0.0f, 1.0f);
    } else if (value > 0.0f && value <= 0.25) {
        return float4(1.0f, 0.0f, 0.0f, 1.0f);
    } else if (value > 0.25f && value <= 0.5f) {
        return float4(0.0f, 1.0f, 0.0f, 1.0f);
    } else if (value > 0.5f && value <= 0.75f) {
        return float4(0.0f, 0.0f, 1.0f, 1.0f);
    } else {
        return float4(1.0f, 1.0f, 1.0f, 1.0f);
    }
}

// Sequential color scheme generated by ColorBrewer 2.0
// http://colorbrewer2.org/
//--------------------------------------------------------------------------------------
float4 SequentialBlue4ColorMap(int count)
{
    if (count== 0) {
        return UCHAR4_TO_FLOAT4(240, 249, 232, 255);
    } else if (count == 1) {
        return UCHAR4_TO_FLOAT4(186, 228, 188, 255);
    } else if (count== 2) {
        return UCHAR4_TO_FLOAT4(123, 204, 196, 255);
    } else if(count== 3) {
        return UCHAR4_TO_FLOAT4(43, 140, 190, 255);
    } else {
        return UCHAR4_TO_FLOAT4(255, 0, 0, 255);
    }
}

float4 SequentialBlue9ColorMap(int count) {
    if (count== 0) {
        return UCHAR4_TO_FLOAT4(1, 70, 54, 255);
    } else if (count == 1) {
        return UCHAR4_TO_FLOAT4(1, 108, 89, 255);
    } else if (count == 2) {
        return UCHAR4_TO_FLOAT4(2, 129, 138, 255);
    } else if (count == 3) {
        return UCHAR4_TO_FLOAT4(54, 144, 192, 255);
    } else if (count == 4) {
        return UCHAR4_TO_FLOAT4(103, 169, 207, 255);
    } else if (count == 5) {
        return UCHAR4_TO_FLOAT4(166, 189, 219, 255);
    } else if (count == 6) {
        return UCHAR4_TO_FLOAT4(208, 209, 230, 255);
    } else if (count == 7) {
        return UCHAR4_TO_FLOAT4(236, 226, 240, 255);
    } else if (count == 8) {
        return UCHAR4_TO_FLOAT4(255, 247, 251, 255);
    } else {
        return UCHAR4_TO_FLOAT4(255, 255, 255, 255);
    }
}

float4 SequentialRed3ColorMap(int count) {
    if (count== 0) {
        return UCHAR4_TO_FLOAT4(254, 224, 210, 255);
    } else if (count == 1) {
        return UCHAR4_TO_FLOAT4(252, 146, 114, 255);
    } else {
        return UCHAR4_TO_FLOAT4(222, 45, 38, 255);
    }
}

float4 SequentialBlack5ColorMap(int count) {
    if (count== 0) {
        return UCHAR4_TO_FLOAT4(247, 247, 247, 255);
    } else if (count == 1) {
        return UCHAR4_TO_FLOAT4(204, 204, 204, 255);
    } else if (count == 2) {
        return UCHAR4_TO_FLOAT4(150, 150, 150, 255);
    } else if (count == 3) {
        return UCHAR4_TO_FLOAT4(99, 99, 99, 255);
    } else {
        return UCHAR4_TO_FLOAT4(37, 37, 37, 255);
    }
}

float4 SequentialSingleHueBlue4ColorMap(int count) {
    if (count== 0) {
        return UCHAR4_TO_FLOAT4(239, 243, 255, 255);
    } else if (count == 1) {
        return UCHAR4_TO_FLOAT4(189, 215, 231, 255);
    } else if (count == 2) {
        return UCHAR4_TO_FLOAT4(107, 174, 215, 255);
    } else if (count == 3){
        return UCHAR4_TO_FLOAT4(33, 113, 181, 255);
    } else {
        return UCHAR4_TO_FLOAT4(255, 0, 0, 255);
    }
}

float4 SequentialPurple4ColorMap(int count) {
    if (count < 2) {
        return UCHAR4_TO_FLOAT4(136, 65, 157, 255);
    } else if (count >= 2 && count < 4) {
        return UCHAR4_TO_FLOAT4(140, 150, 198, 255);
    } else if (count >= 4 && count < 6) {
        return UCHAR4_TO_FLOAT4(179, 205, 227, 255);
    } else {
        return UCHAR4_TO_FLOAT4(237, 248, 251, 255);
    }
}
#endif // DEBUG_HLSL